DROP VIEW IF EXISTS view_order_completecount;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_order_completecount` AS select `n`.`work_order_code` AS `work_order_code`,count(distinct `m`.`camera_sn`) AS `complete_num` from (`mo_final_result` `m` join `mo_tag_info` `n`) where ((`m`.`camera_sn` = `n`.`tag_sn`) and (`m`.`check_type` = 'FQC') and (`m`.`check_result` = true)) group by `n`.`work_order_code`;

DROP VIEW IF EXISTS view_output_history;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_output_history` AS select date_format(`mo_assemble_info`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_assemble_info`.`camera_sn`) AS `num`,'fitpcba' AS `stage` from `mo_assemble_info` where (`mo_assemble_info`.`start_time` between (now() - interval 15 day) and now()) group by `days` union all select date_format(`mo_calibration`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_calibration`.`camera_sn`) AS `num`,'calibration' AS `stage` from `mo_calibration` where (`mo_calibration`.`start_time` between (now() - interval 15 day) and now()) group by `days` union all select date_format(`mo_tag_shell_info`.`operation_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_tag_shell_info`.`camera_sn`) AS `num`,'assemble' AS `stage` from `mo_tag_shell_info` where (`mo_tag_shell_info`.`operation_time` between (now() - interval 15 day) and now()) group by `days` union all select date_format(`mo_adjust_focus`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_adjust_focus`.`camera_sn`) AS `num`,'adjust' AS `stage` from `mo_adjust_focus` where ((`mo_adjust_focus`.`operator` <> 'AA') and (`mo_adjust_focus`.`start_time` between (now() - interval 15 day) and now())) group by `days` union all select date_format(`mo_auto_adjust_info`.`operation_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_auto_adjust_info`.`beam_sn`) AS `num`,'aa' AS `stage` from `mo_auto_adjust_info` where ((`mo_auto_adjust_info`.`station_num` = 7) and (`mo_auto_adjust_info`.`operation_time` between (now() - interval 15 day) and now())) group by `days` union all select date_format(`mo_final_result`.`check_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_final_result`.`camera_sn`) AS `num`,'finalcheck' AS `stage` from `mo_final_result` where ((`mo_final_result`.`check_type` = 'FQC') and (`mo_final_result`.`check_time` between (now() - interval 15 day) and now())) group by `days` union all select date_format(`mo_final_result`.`check_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_final_result`.`camera_sn`) AS `num`,'oqc' AS `stage` from `mo_final_result` where ((`mo_final_result`.`check_type` = 'OQC') and (`mo_final_result`.`check_time` between (now() - interval 15 day) and now())) group by `days` union all select date_format(`m`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `m`.`packing_code`) AS `num`,'pack1' AS `stage` from `mo_packing_info` `m` where (`m`.`start_time` between (now() - interval 15 day) and now()) group by `days` union all select date_format(`m`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `m`.`camera_sn`) AS `num`,'pack2' AS `stage` from `mo_packing_info` `m` where (`m`.`start_time` between (now() - interval 15 day) and now()) group by `days`;

DROP VIEW IF EXISTS view_shell_beam_type;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_shell_beam_type` AS select `a`.`shell_sn` AS `shell_sn`,`a`.`beam_sn` AS `beam_sn`,`a`.`order_id` AS `order_id`,`a`.`order_code` AS `order_code`,`a`.`product_type` AS `product_type`,`a`.`rownum` AS `rownum` from (select `m`.`shell_sn` AS `shell_sn`,`n`.`beam_sn` AS `beam_sn`,`o`.`id` AS `order_id`,`o`.`work_order_code` AS `order_code`,`o`.`product_type` AS `product_type`,row_number() OVER (PARTITION BY `m`.`shell_sn` ORDER BY `m`.`id` desc )  AS `rownum` from ((`mo_tag_shell_info` `m` join `mo_beam_info` `n`) join `mo_produce_order` `o`) where ((`m`.`camera_sn` = `n`.`beam_sn`) and (`n`.`produce_order_id` = `o`.`id`))) `a` group by `a`.`shell_sn`;

DROP VIEW IF EXISTS view_stage_aa;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_aa` AS select count(distinct `a`.`beam_sn`) AS `num`,'FirstPass' AS `htype` from (select `m`.`beam_sn` AS `beam_sn`,`m`.`operation_result` AS `operation_result` from `mo_auto_adjust_info` `m` where ((`m`.`station_num` = 7) and (cast(`m`.`operation_time` as date) >= curdate())) group by `m`.`beam_sn`) `a` where (`a`.`operation_result` = 1) union select count(distinct `m`.`beam_sn`) AS `num`,'SumCount' AS `htype` from `mo_auto_adjust_info` `m` where ((`m`.`station_num` = 7) and (cast(`m`.`operation_time` as date) >= curdate())) union select count(distinct `a`.`camera_sn`) AS `num`,'DefectCount' AS `htype` from (select `m`.`camera_sn` AS `camera_sn`,`m`.`error_code` AS `error_code` from (select `mo_auto_adjust_info`.`beam_sn` AS `camera_sn`,`mo_auto_adjust_info`.`operation_result` AS `error_code`,row_number() OVER (PARTITION BY `mo_auto_adjust_info`.`beam_sn` ORDER BY `mo_auto_adjust_info`.`id` desc )  AS `rownum` from `mo_auto_adjust_info` where ((`mo_auto_adjust_info`.`station_num` = 7) and (cast(`mo_auto_adjust_info`.`operation_time` as date) = curdate()))) `m` group by `m`.`camera_sn`) `a` where (`a`.`error_code` = 0);

DROP VIEW IF EXISTS view_stage_adjust;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_adjust` AS select count(distinct `a`.`camera_sn`) AS `num`,'FirstPass' AS `htype` from (select `m`.`camera_sn` AS `camera_sn`,sum(`m`.`error_code`) AS `error_code` from (select `mo_adjust_focus`.`camera_sn` AS `camera_sn`,`mo_adjust_focus`.`error_code` AS `error_code`,row_number() OVER (PARTITION BY `mo_adjust_focus`.`camera_sn` )  AS `rownum` from `mo_adjust_focus` where ((`mo_adjust_focus`.`operator` <> 'AA') and (cast(`mo_adjust_focus`.`start_time` as date) = curdate()))) `m` where (`m`.`rownum` <= 2) group by `m`.`camera_sn`) `a` where (`a`.`error_code` = 0) union select count(distinct `m`.`camera_sn`) AS `num`,'SumCount' AS `htype` from `mo_adjust_focus` `m` where ((`m`.`operator` <> 'AA') and (cast(`m`.`start_time` as date) = curdate())) union select count(distinct `a`.`camera_sn`) AS `num`,'DefectCount' AS `htype` from (select `m`.`camera_sn` AS `camera_sn`,sum(`m`.`error_code`) AS `error_code` from (select `mo_adjust_focus`.`camera_sn` AS `camera_sn`,`mo_adjust_focus`.`error_code` AS `error_code`,row_number() OVER (PARTITION BY `mo_adjust_focus`.`camera_sn` ORDER BY `mo_adjust_focus`.`id` desc )  AS `rownum` from `mo_adjust_focus` where ((`mo_adjust_focus`.`operator` <> 'AA') and (cast(`mo_adjust_focus`.`start_time` as date) = curdate()))) `m` where (`m`.`rownum` <= 2) group by `m`.`camera_sn`) `a` where (`a`.`error_code` <> 0);

DROP VIEW IF EXISTS view_stage_assemble;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_assemble` AS select count(distinct `m`.`camera_sn`) AS `num`,'SumCount' AS `htype` from `mo_tag_shell_info` `m` where (cast(`m`.`operation_time` as date) = curdate());

DROP VIEW IF EXISTS view_stage_calibrate;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_calibrate` AS select count(distinct `n`.`camera_sn`) AS `num`,'FirstPass' AS `htype` from (select `m`.`camera_sn` AS `camera_sn`,`m`.`error_code` AS `error_code` from `mo_calibration` `m` where (cast(`m`.`start_time` as date) = curdate()) group by `m`.`camera_sn`) `n` where (`n`.`error_code` = 0) union select count(distinct `n`.`camera_sn`) AS `num`,'SumCount' AS `htype` from (select `m`.`camera_sn` AS `camera_sn`,`m`.`error_code` AS `error_code` from `mo_calibration` `m` where (cast(`m`.`start_time` as date) = curdate()) group by `m`.`camera_sn`) `n` union select count(distinct `a`.`camera_sn`) AS `num`,'DefectCount' AS `htype` from (select `n`.`camera_sn` AS `camera_sn`,`n`.`error_code` AS `error_code` from (select `mo_calibration`.`camera_sn` AS `camera_sn`,`mo_calibration`.`error_code` AS `error_code`,row_number() OVER (PARTITION BY `mo_calibration`.`camera_sn` ORDER BY `mo_calibration`.`id` desc )  AS `rownum` from `mo_calibration` where (cast(`mo_calibration`.`start_time` as date) = curdate())) `n` group by `n`.`camera_sn` having (`n`.`error_code` <> 0)) `a`;

DROP VIEW IF EXISTS view_stage_fitpcba;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_fitpcba` AS select count(distinct `m`.`camera_sn`) AS `num`,'SumCount' AS `htype` from `mo_assemble_info` `m` where (cast(`m`.`start_time` as date) = curdate());

DROP VIEW IF EXISTS view_stage_fqc;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_fqc` AS select count(distinct `a`.`camera_sn`) AS `num`,'FirstPass' AS `htype` from (select `m`.`camera_sn` AS `camera_sn`,`m`.`check_result` AS `check_result` from `mo_final_result` `m` where ((`m`.`check_type` = 'FQC') and (cast(`m`.`check_time` as date) = curdate())) group by `m`.`camera_sn`) `a` where (`a`.`check_result` = 1) union select count(distinct `m`.`camera_sn`) AS `num`,'SumCount' AS `htype` from `mo_final_result` `m` where ((`m`.`check_type` = 'FQC') and (cast(`m`.`check_time` as date) = curdate())) union select count(distinct `a`.`camera_sn`) AS `num`,'DefectCount' AS `htype` from (select `m`.`camera_sn` AS `camera_sn`,`m`.`error_code` AS `error_code` from (select `mo_final_result`.`camera_sn` AS `camera_sn`,`mo_final_result`.`check_result` AS `error_code`,row_number() OVER (PARTITION BY `mo_final_result`.`camera_sn` ORDER BY `mo_final_result`.`id` desc )  AS `rownum` from `mo_final_result` where ((`mo_final_result`.`check_type` = 'FQC') and (cast(`mo_final_result`.`check_time` as date) = curdate()))) `m` group by `m`.`camera_sn`) `a` where (`a`.`error_code` = 0);

DROP VIEW IF EXISTS view_stage_ptype_today;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_ptype_today` AS select count(`b`.`beam_sn`) AS `num`,`p`.`product_type` AS `product_type`,'adjust' AS `stage` from ((select distinct `m`.`camera_sn` AS `beam_sn` from `mo_adjust_focus` `m` where (cast(`m`.`start_time` as date) = curdate())) `b` left join (select `m`.`beam_sn` AS `beam_sn`,`n`.`product_type` AS `product_type` from (`mo_beam_info` `m` join `mo_produce_order` `n`) where (`m`.`produce_order_id` = `n`.`id`)) `p` on((`b`.`beam_sn` = `p`.`beam_sn`))) group by `p`.`product_type` union all select count(`a`.`beam_sn`) AS `num`,`p`.`product_type` AS `product_type`,'AA' AS `stage` from ((select distinct `m`.`beam_sn` AS `beam_sn` from `mo_auto_adjust_info` `m` where ((`m`.`station_num` = 7) and (cast(`m`.`add_time` as date) = curdate()))) `a` left join (select `m`.`beam_sn` AS `beam_sn`,`n`.`product_type` AS `product_type` from (`mo_beam_info` `m` join `mo_produce_order` `n`) where (`m`.`produce_order_id` = `n`.`id`)) `p` on((`a`.`beam_sn` = `p`.`beam_sn`))) group by `p`.`product_type` union all select count(`a`.`beam_sn`) AS `num`,`p`.`product_type` AS `product_type`,'fitpcba' AS `stage` from ((select distinct `m`.`camera_sn` AS `beam_sn` from `mo_assemble_info` `m` where (cast(`m`.`start_time` as date) = curdate())) `a` left join (select `m`.`beam_sn` AS `beam_sn`,`n`.`product_type` AS `product_type` from (`mo_beam_info` `m` join `mo_produce_order` `n`) where (`m`.`produce_order_id` = `n`.`id`)) `p` on((`a`.`beam_sn` = `p`.`beam_sn`))) group by `p`.`product_type` union all select count(`a`.`beam_sn`) AS `num`,`p`.`product_type` AS `product_type`,'assemble' AS `stage` from ((select distinct `m`.`camera_sn` AS `beam_sn` from `mo_tag_shell_info` `m` where (cast(`m`.`operation_time` as date) = curdate())) `a` left join (select `m`.`beam_sn` AS `beam_sn`,`n`.`product_type` AS `product_type` from (`mo_beam_info` `m` join `mo_produce_order` `n`) where (`m`.`produce_order_id` = `n`.`id`)) `p` on((`a`.`beam_sn` = `p`.`beam_sn`))) group by `p`.`product_type` union all select count(`a`.`shell_sn`) AS `num`,`b`.`product_type` AS `product_type`,'calibrate' AS `stage` from ((select distinct `mo_calibration`.`camera_sn` AS `shell_sn` from `mo_calibration` where (cast(`mo_calibration`.`start_time` as date) = curdate())) `a` left join `view_shell_beam_type` `b` on((`a`.`shell_sn` = `b`.`shell_sn`))) group by `b`.`product_type` union all select count(`a`.`camera_sn`) AS `num`,`b`.`product_type` AS `product_type`,'FQC' AS `stage` from ((select distinct `m`.`camera_sn` AS `camera_sn` from `mo_final_result` `m` where ((`m`.`check_type` = 'FQC') and (cast(`m`.`check_time` as date) = curdate()))) `a` left join `view_shell_beam_type` `b` on((`b`.`shell_sn` = `a`.`camera_sn`))) group by `b`.`product_type` union all select count(`a`.`camera_sn`) AS `num`,`b`.`product_type` AS `product_type`,'OQC' AS `stage` from ((select distinct `m`.`camera_sn` AS `camera_sn` from `mo_final_result` `m` where ((`m`.`check_type` = 'OQC') and (cast(`m`.`check_time` as date) = curdate()))) `a` left join `view_shell_beam_type` `b` on((`a`.`camera_sn` = `b`.`shell_sn`))) group by `b`.`product_type` union all select count(`a`.`packing_code`) AS `num`,`b`.`product_type` AS `product_type`,'pack1' AS `stage` from ((select `mo_packing_info`.`packing_code` AS `packing_code`,`mo_packing_info`.`camera_sn` AS `shell_sn` from `mo_packing_info` where (cast(`mo_packing_info`.`start_time` as date) = curdate()) group by `mo_packing_info`.`packing_code`) `a` left join `view_shell_beam_type` `b` on((`a`.`shell_sn` = `b`.`shell_sn`))) group by `b`.`product_type` union all select count(`a`.`shell_sn`) AS `num`,`b`.`product_type` AS `product_type`,'pack2' AS `stage` from ((select distinct `mo_packing_info`.`camera_sn` AS `shell_sn` from `mo_packing_info` where (cast(`mo_packing_info`.`start_time` as date) = curdate())) `a` left join `view_shell_beam_type` `b` on((`a`.`shell_sn` = `b`.`shell_sn`))) group by `b`.`product_type`;

DROP VIEW IF EXISTS view_stage_today;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stage_today` AS select count(distinct `mo_adjust_focus`.`camera_sn`) AS `num`,'adjust' AS `stage` from `mo_adjust_focus` where ((`mo_adjust_focus`.`operator` <> 'AA') and (cast(`mo_adjust_focus`.`start_time` as date) = curdate())) union all select count(distinct `mo_auto_adjust_info`.`beam_sn`) AS `num`,'aa' AS `stage` from `mo_auto_adjust_info` where ((`mo_auto_adjust_info`.`station_num` = 7) and (cast(`mo_auto_adjust_info`.`operation_time` as date) = curdate())) union all select count(distinct `mo_assemble_info`.`camera_sn`) AS `num`,'fitpcba' AS `stage` from `mo_assemble_info` where (cast(`mo_assemble_info`.`start_time` as date) = curdate()) union all select count(distinct `mo_tag_shell_info`.`camera_sn`) AS `num`,'assemble' AS `stage` from `mo_tag_shell_info` where (cast(`mo_tag_shell_info`.`operation_time` as date) = curdate()) union all select count(distinct `mo_calibration`.`camera_sn`) AS `num`,'calibration' AS `stage` from `mo_calibration` where (cast(`mo_calibration`.`start_time` as date) = curdate()) union all select count(distinct `mo_final_result`.`camera_sn`) AS `num`,'finalcheck' AS `stage` from `mo_final_result` where ((`mo_final_result`.`check_type` = 'FQC') and (cast(`mo_final_result`.`check_time` as date) = curdate())) union all select count(distinct `mo_final_result`.`camera_sn`) AS `num`,'oqc' AS `stage` from `mo_final_result` where ((`mo_final_result`.`check_type` = 'OQC') and (cast(`mo_final_result`.`check_time` as date) = curdate())) union all select count(distinct `m`.`packing_code`) AS `num`,'pack1' AS `stage` from `mo_packing_info` `m` where (cast(`m`.`start_time` as date) = curdate()) union all select count(distinct `m`.`camera_sn`) AS `num`,'pack2' AS `stage` from `mo_packing_info` `m` where (cast(`m`.`start_time` as date) = curdate());

DROP VIEW IF EXISTS view_stagecount;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_stagecount` AS select date_format(`mo_calibration`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_calibration`.`camera_sn`) AS `num`,'calibration' AS `stage` from `mo_calibration` where (`mo_calibration`.`start_time` between (now() - interval 30 day) and now()) group by `days` union all select date_format(`mo_assemble_info`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_assemble_info`.`camera_sn`) AS `num`,'assemble' AS `stage` from `mo_assemble_info` where (`mo_assemble_info`.`start_time` between (now() - interval 30 day) and now()) group by `days` union all select date_format(`mo_final_check`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_final_check`.`camera_sn`) AS `num`,'finalcheck' AS `stage` from `mo_final_check` where (`mo_final_check`.`start_time` between (now() - interval 30 day) and now()) group by `days` union all select date_format(`mo_adjust_focus`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_adjust_focus`.`camera_sn`) AS `num`,'adjust' AS `stage` from `mo_adjust_focus` where ((`mo_adjust_focus`.`operator` <> 'AA') and (`mo_adjust_focus`.`start_time` between (now() - interval 30 day) and now())) group by `days` union all select date_format(`mo_adjust_focus`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_adjust_focus`.`camera_sn`) AS `num`,'aa' AS `stage` from `mo_adjust_focus` where ((`mo_adjust_focus`.`operator` = 'AA') and (`mo_adjust_focus`.`start_time` between (now() - interval 30 day) and now())) group by `days` union all select date_format(`mo_oqc_info`.`start_time`,'%Y-%m-%d') AS `days`,count(distinct `mo_oqc_info`.`camera_sn`) AS `num`,'oqc' AS `stage` from `mo_oqc_info` where (`mo_oqc_info`.`start_time` between (now() - interval 30 day) and now()) group by `days`;

DROP VIEW IF EXISTS view_sumwip;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_sumwip` AS select count(distinct `m`.`camera_sn`) AS `num` from (select distinct `mo_adjust_focus`.`camera_sn` AS `camera_sn` from `mo_adjust_focus` where (cast(`mo_adjust_focus`.`start_time` as date) = curdate()) union select distinct `mo_calibration`.`camera_sn` AS `camera_sn` from `mo_calibration` where (cast(`mo_calibration`.`start_time` as date) = curdate())) `m` where `m`.`camera_sn` in (select distinct `mo_final_result`.`camera_sn` from `mo_final_result` where (cast(`mo_final_result`.`check_time` as date) = curdate())) is false;